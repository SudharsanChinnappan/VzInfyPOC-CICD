AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to create ASG Stack
Parameters:
  NetworkStackName:
    Type: String
    Description: Enter the NetworkStack Name
    Default: VzInfyPOC-Network
  ApplicationName:
    Type: String
    Description: Enter the Application Name
    Default: VzInfyPOC
  MasterInstanceType:
    Type: String
    Description: Choose the EC2 Instance Type for your Application
    Default: t2.medium
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
  WorkerInstanceType:
    Type: String
    Description: Choose the EC2 Instance Type for your Application
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
  Environment:
    Type: String
    Description: Enter the Application Environment
    Default: DEV
    AllowedValues:
      - DEV
      - TEST
      - PROD
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The KeyName for logging into the EC2 Instance

Mappings:
  RegionMap:
    us-east-1:
      AMALINX: ami-052646c50848108d6 
 

Resources:
  
  MasterLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: "true"
      KeyName: !Ref KeyName
      LaunchConfigurationName: MasterLaunchConfiguration
      ImageId:  
        Fn::FindInMap:
          - RegionMap
          - !Ref "AWS::Region"
          - "AMALINX"
      SecurityGroups:
        - Fn::ImportValue: !Sub "${NetworkStackName}-APPLICATIONSECURITYGROUP"
        - !Ref WorkerLoadBalancerSecurityGroup
      InstanceType: !Ref MasterInstanceType
      UserData:
        Fn::Base64: !Sub |
          #!bin/bash
          service sshd restart

  MasterAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: AutoScalingGroup
      DesiredCapacity: 1
      MinSize:  "1"
      MaxSize:  "1"
      LaunchConfigurationName: !Ref MasterLaunchConfiguration
      TargetGroupARNs:
        - !Ref MasterTargetGroup
      MetricsCollection: 
        - Granularity: "1Minute"
          Metrics: 
            - "GroupMinSize"
            - "GroupMaxSize"
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${NetworkStackName}-PUBLICSUBNET1"
        - Fn::ImportValue: !Sub "${NetworkStackName}-PUBLICSUBNET2" 

      Tags:
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: "true"
        - Key: ApplicationName
          Value: !Ref ApplicationName
          PropagateAtLaunch: "true"
        - Key: Role
          Value: Master
          PropagateAtLaunch: "true"
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - !Ref ApplicationName
                - "Master"
          PropagateAtLaunch: "true"

  MasterTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: MasterEC2TargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      TargetType: instance
      UnhealthyThresholdCount: 3
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"
      Tags:
        - Key: Name
          Value: MasterTargetGroup
        - Key: Port
          Value: 80

  WorkerLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: "true"
      KeyName: !Ref KeyName
      LaunchConfigurationName: WorkerLaunchConfiguration
      ImageId:  
        Fn::FindInMap:
          - RegionMap
          - !Ref "AWS::Region"
          - "AMALINX"
      SecurityGroups:
        - Fn::ImportValue: !Sub "${NetworkStackName}-APPLICATIONSECURITYGROUP"
        - !Ref WorkerLoadBalancerSecurityGroup
      InstanceType: !Ref WorkerInstanceType
      UserData:
        Fn::Base64: !Sub |
          #!bin/bash
          service sshd restart

  WorkerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: WorkerAutoScalingGroup
      DesiredCapacity: 2
      MinSize:  "2"
      MaxSize:  "3"
      LaunchConfigurationName: !Ref WorkerLaunchConfiguration
      TargetGroupARNs:
        - !Ref WorkerTargetGroup
      MetricsCollection: 
        - Granularity: "1Minute"
          Metrics: 
            - "GroupMinSize"
            - "GroupMaxSize"
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${NetworkStackName}-PUBLICSUBNET1"
        - Fn::ImportValue: !Sub "${NetworkStackName}-PUBLICSUBNET2" 

      Tags:
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: "true"
        - Key: ApplicationName
          Value: !Ref ApplicationName
          PropagateAtLaunch: "true"
        - Key: Role
          Value: Worker
          PropagateAtLaunch: "true"
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - !Ref ApplicationName
                - "Worker"
          PropagateAtLaunch: "true"
           
  WorkerLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows HTTP Connection
      GroupName: WorkerLoadBalancerSecurityGroup
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 30007
          ToPort: 30007
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"
      Tags:
        - Key: Name
          Value: 
            Fn::Join:
              - "-"
              - - !Ref ApplicationName
                - "WorkerLoadBalancerSecurityGroup"
  
  WorkerLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: WorkerLoadBalancer
      Scheme: internet-facing
      Subnets:
        - Fn::ImportValue: !Sub "${NetworkStackName}-PUBLICSUBNET1"
        - Fn::ImportValue: !Sub "${NetworkStackName}-PUBLICSUBNET2"
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 50
      SecurityGroups:
        - !Ref WorkerLoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - !Ref ApplicationName
                - "WorkerLoadBalancer"

  WorkerHTTP80Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref WorkerTargetGroup
      LoadBalancerArn: !Ref WorkerLoadBalancer
      Port: 80
      Protocol: HTTP
  WorkerAppServerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: "forward"
          TargetGroupArn: !Ref WorkerTargetGroup
      Conditions:
        - Field: "path-pattern"
          Values: ["*"]
      ListenerArn: !Ref WorkerHTTP80Listener
      Priority: 1 
  WorkerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: WorkerEC2TargetGroup
      Port: 30007
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      TargetType: instance
      UnhealthyThresholdCount: 3
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"
      Tags:
        - Key: Name
          Value: WorkerTargetGroup
        - Key: Port
          Value: 30007

Outputs:
  WorkerLoadBalancerDns:
    Description: VzInfyPOC WorkerLoadBalancerDns
    Value:
      Fn::GetAtt:
        - WorkerLoadBalancer
        - DNSName




 